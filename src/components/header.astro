---
const navLinks = [
    { href: "/", text: "Home" },
    { href: "/about/", text: "Profile" },
    { href: "/blog/", text: "Blog" }
];

const currentPath = Astro.url.pathname;
---
<head>
  <meta charset="utf-8" />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700&display=swap" rel="stylesheet">
</head>

<header class="site-header">
  <button class="menu-toggle" aria-label="メニューを開く" aria-expanded="false">
    <span class="bar"></span>
  </button>

  <nav class="primary-nav">
    <ul class="nav-list">
      {navLinks.map(link => (
        <li class="nav-item">
          <a 
            href={link.href} 
            class:list={["nav-link", { "is-active": currentPath === link.href }]}
          >
            {link.text}
          </a>
        </li>
      ))}
    </ul>
  </nav>
</header>

<style>
:root {
  --color-text-primary: #202124;
  --color-text-secondary: #5f6368;
  --color-accent: #1a73e8;
  --color-border: #e0e0e0;
  --shadow-fab: 0 4px 12px rgba(0,0,0,0.1), 0 2px 4px rgba(0,0,0,0.1);
  --shadow-fab-hover: 0 6px 16px rgba(0,0,0,0.15), 0 4px 6px rgba(0,0,0,0.1);
}

.site-header {
  position: fixed;
  top: 1rem;
  right: 1.5rem;
  z-index: 1000;
}

/* --- ナビゲーションパネル（開いたとき） --- */
.primary-nav {
  display: block;
  position: absolute;
  top: calc(100% + 12px); /* ボタンの少し下に配置 */
  right: 0;
  width: 280px;
  background-color: white;
  border-radius: 12px;
  border: 1px solid var(--color-border);
  box-shadow: var(--shadow-fab);
  overflow: hidden;

  /* アニメーションのための初期設定 */
  opacity: 0;
  visibility: hidden;
  transform-origin: top right; /* 右上を基点にアニメーション */
  transform: scale(0.95) translateY(-10px);
  transition: opacity 0.2s ease, transform 0.2s ease, visibility 0.2s;
}

.nav-list {
  list-style: none;
  margin: 0;
  padding: 0.5rem;
}

.nav-item {
  width: 100%;
  text-align: center;
}

.nav-link {
  display: inline-block;
  position: relative;
  padding: 0.8rem 1rem;
  font-family: 'Noto Sans JP', sans-serif;
  font-size: 1.1rem;
  font-weight: 500;
  color: var(--color-text-secondary);
  text-decoration: none;
  transition: color 0.2s ease;
  border-radius: 8px;
}
.nav-link:hover {
  color: var(--color-text-primary);
  background-color: #f7f9fc;
}

/* 下線アニメーション */
.nav-link::after {
  content: '';
  position: absolute;
  bottom: 0.5rem; /* 下線の位置を調整 */
  left: 50%;
  transform: translateX(-50%);
  width: 50%; /* テキストより少し短めに */
  height: 2px;
  background-color: var(--color-accent);
  border-radius: 2px;
  transform: translateX(-50%) scaleX(0);
  transform-origin: center;
  transition: transform 0.3s cubic-bezier(0.19, 1, 0.22, 1);
}
.nav-link:hover::after {
  transform: translateX(-50%) scaleX(1);
}

/* 現在地のリンク */
.nav-link.is-active {
  color: var(--color-accent);
  font-weight: 700;
}
.nav-link.is-active::after {
  transform: translateX(-50%) scaleX(1);
}

/* --- ハンバーガーメニューボタン --- */
.menu-toggle {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: white;
  border: 1px solid var(--color-border);
  border-radius: 50%;
  padding: 0;
  cursor: pointer;
  width: 56px;
  height: 56px;
  box-shadow: var(--shadow-fab);
  transition: box-shadow 0.2s ease, transform 0.2s ease;
}
.menu-toggle:hover {
  transform: scale(1.05);
  box-shadow: var(--shadow-fab-hover);
}

.menu-toggle .bar {
  display: block;
  width: 24px;
  height: 2px;
  background-color: var(--color-text-primary);
  border-radius: 2px;
  position: relative;
  transition: all 0.3s ease;
}
.menu-toggle .bar::before,
.menu-toggle .bar::after {
  content: '';
  position: absolute;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: inherit;
  border-radius: inherit;
  transition: transform 0.3s ease;
}
.menu-toggle .bar::before {
  transform: translateY(-8px);
}
.menu-toggle .bar::after {
  transform: translateY(8px);
}

/* --- JavaScriptでis-openクラスが付いた時のスタイル --- */
.primary-nav.is-open {
  opacity: 1;
  transform: scale(1) translateY(0);
  visibility: visible;
}

.menu-toggle.is-open .bar {
  background-color: transparent;
}
.menu-toggle.is-open .bar::before {
  transform: translateY(0) rotate(45deg);
}
.menu-toggle.is-open .bar::after {
  transform: translateY(0) rotate(-45deg);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const menuToggle = document.querySelector('.menu-toggle');
  const primaryNav = document.querySelector('.primary-nav');

  if (menuToggle && primaryNav) {
    menuToggle.addEventListener('click', (event) => {
      // イベントが他の要素に伝播するのを防ぐ
      event.stopPropagation();
      
      const isOpen = menuToggle.classList.toggle('is-open');
      primaryNav.classList.toggle('is-open');
      
      // スクリーンリーダー向けに開閉状態を伝える
      menuToggle.setAttribute('aria-expanded', isOpen.toString());
    });

    // メニューの外側をクリックした時にメニューを閉じる
    document.addEventListener('click', (event) => {
      const target = event.target as Node;
      if (primaryNav.classList.contains('is-open') && !primaryNav.contains(target) && !menuToggle.contains(target)) {
        menuToggle.classList.remove('is-open');
        primaryNav.classList.remove('is-open');
        menuToggle.setAttribute('aria-expanded', 'false');
      }
    });
  }
});
</script>