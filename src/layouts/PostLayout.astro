---
// frontmatterから受け取る情報を定義
const { frontmatter } = Astro.props;
import Header from "../components/header.astro";
import Footer from "../components/footer.astro";
---
<html lang="ja">
<head>
  <title>{frontmatter.title}</title>
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="viewport" content="width=device-width" />
  <meta name="generator" content={Astro.generator} />
  <meta charset="utf-8" />
  
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;700;900&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />
</head>

<body>
  <Header />
  <main class="main-content">
    <article class="article-container">
      <header class="article-header">
        <h1 class="article-title">{frontmatter.title}</h1>
        <div class="article-meta">
          <time class="meta-item" datetime={frontmatter.date}>
            <span class="material-symbols-outlined">calendar_month</span>
            {frontmatter.date}
          </time>
          {frontmatter.author && (
            <span class="meta-item">
              <span class="material-symbols-outlined">person</span>
              {frontmatter.author}
            </span>
          )}
        </div>
        {frontmatter.tags && (
          <div class="tags-container">
            {frontmatter.tags.map((tag: string) => (
              <span class="tag-item">{tag}</span>
            ))}
          </div>
        )}
      </header>
      
      <div class="prose">
        <slot />
      </div>
    </article>
  </main>
  <Footer/>
</body>
</html>

<style is:global>
:root {
  --color-background: #ffffff;
  --color-background-body: #f7f9fc;
  --color-text-primary: #222;
  --color-text-secondary: #5f6368;
  --color-accent: #1a73e8;
  --color-border: #e0e0e0;
  --color-blockquote-bg: #f1f3f5;
  --font-family-base: 'Noto Sans JP', sans-serif;
  --shadow-subtle: 0 4px 12px rgba(0, 0, 0, 0.05);
}
body {
  margin: 0;
  padding: 0;
  font-family: var(--font-family-base);
  background-color: var(--color-background-body);
  color: var(--color-text-primary);
  line-height: 1.8; /* 本文の行間を広めにとる */
}
</style>

<style>
.main-content {
  padding-top: 70px; /* 固定ヘッダー分のスペース */
}

.article-container {
  max-width: 800px;
  margin: 4rem auto 6rem;
  padding: 3rem 4rem;
  background-color: var(--color-background);
  border-radius: 16px;
  box-shadow: var(--shadow-subtle);
}

.article-header {
  border-bottom: 1px solid var(--color-border);
  padding-bottom: 2rem;
  margin-bottom: 2.5rem;
}

.article-title {
  font-size: 2.5rem;
  font-weight: 900;
  line-height: 1.3;
  margin: 0 0 1rem;
}

.article-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem 1.5rem;
  color: var(--color-text-secondary);
  font-size: 0.9rem;
}
.meta-item {
  display: inline-flex;
  align-items: center;
  gap: 0.4rem;
}
.meta-item .material-symbols-outlined {
  font-size: 1.2rem;
}

.tags-container {
  margin-top: 1.5rem;
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
}
.tag-item {
  font-size: 0.8rem;
  color: var(--color-accent);
  background-color: color-mix(in srgb, var(--color-accent) 15%, transparent);
  padding: 0.25rem 0.75rem;
  border-radius: 99px;
}

/* --- Markdownから生成される本文のスタイル --- */
.prose {
  font-size: 1.1rem;
}
.prose :global(h2) {
  font-size: 1.8rem;
  font-weight: 700;
  margin: 2.5rem 0 1.5rem;
  padding-bottom: 0.5rem;
  border-bottom: 2px solid var(--color-border);
}
.prose :global(h3) {
  font-size: 1.4rem;
  font-weight: 700;
  margin: 2rem 0 1rem;
  padding-left: 1rem;
  border-left: 4px solid var(--color-accent);
}
.prose :global(p) {
  margin: 0 0 1.5rem;
}
.prose :global(a) {
  color: var(--color-accent);
  text-decoration: none;
  border-bottom: 1px solid color-mix(in srgb, var(--color-accent) 30%, transparent);
}
.prose :global(a:hover) {
  border-bottom-color: var(--color-accent);
}
.prose :global(ul),
.prose :global(ol) {
  padding-left: 1.5em;
  margin-bottom: 1.5rem;
}
.prose :global(li) {
  margin-bottom: 0.5rem;
}
.prose :global(blockquote) {
  margin: 2rem 0;
  padding: 1.5rem;
  background-color: var(--color-blockquote-bg);
  border-left: 5px solid var(--color-border);
  border-radius: 8px;
}
.prose :global(blockquote p) {
  margin: 0;
}
.prose :global(pre) {
  background-color: #282c34; /* ダークなコードブロック背景 */
  color: #abb2bf;
  padding: 1.5rem;
  border-radius: 8px;
  overflow-x: auto;
  margin-bottom: 1.5rem;
}
.prose :global(code) {
  font-family: 'Menlo', 'Consolas', monospace;
  font-size: 0.95em;
}
.prose :global(pre > code) {
  background-color: transparent;
  padding: 0;
}
/* インラインコード */
.prose :global(p > code),
.prose :global(li > code) {
  background-color: color-mix(in srgb, var(--color-accent) 15%, transparent);
  color: var(--color-text-primary);
  padding: 0.2em 0.4em;
  border-radius: 4px;
}
.prose :global(img) {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
  margin: 2rem 0;
}

@media (max-width: 768px) {
  .article-container {
    margin: 2rem auto 4rem;
    padding: 1.5rem;
    border-radius: 0;
  }
  .article-title {
    font-size: 2rem;
  }
  .prose {
    font-size: 1rem;
  }
}
</style>